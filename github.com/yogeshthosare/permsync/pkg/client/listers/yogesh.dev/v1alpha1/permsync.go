/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/yogeshthosare/permsync/pkg/apis/yogesh.dev/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PermsyncLister helps list Permsyncs.
// All objects returned here must be treated as read-only.
type PermsyncLister interface {
	// List lists all Permsyncs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Permsync, err error)
	// Permsyncs returns an object that can list and get Permsyncs.
	Permsyncs(namespace string) PermsyncNamespaceLister
	PermsyncListerExpansion
}

// permsyncLister implements the PermsyncLister interface.
type permsyncLister struct {
	indexer cache.Indexer
}

// NewPermsyncLister returns a new PermsyncLister.
func NewPermsyncLister(indexer cache.Indexer) PermsyncLister {
	return &permsyncLister{indexer: indexer}
}

// List lists all Permsyncs in the indexer.
func (s *permsyncLister) List(selector labels.Selector) (ret []*v1alpha1.Permsync, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Permsync))
	})
	return ret, err
}

// Permsyncs returns an object that can list and get Permsyncs.
func (s *permsyncLister) Permsyncs(namespace string) PermsyncNamespaceLister {
	return permsyncNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PermsyncNamespaceLister helps list and get Permsyncs.
// All objects returned here must be treated as read-only.
type PermsyncNamespaceLister interface {
	// List lists all Permsyncs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Permsync, err error)
	// Get retrieves the Permsync from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Permsync, error)
	PermsyncNamespaceListerExpansion
}

// permsyncNamespaceLister implements the PermsyncNamespaceLister
// interface.
type permsyncNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Permsyncs in the indexer for a given namespace.
func (s permsyncNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Permsync, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Permsync))
	})
	return ret, err
}

// Get retrieves the Permsync from the indexer for a given namespace and name.
func (s permsyncNamespaceLister) Get(name string) (*v1alpha1.Permsync, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("permsync"), name)
	}
	return obj.(*v1alpha1.Permsync), nil
}
